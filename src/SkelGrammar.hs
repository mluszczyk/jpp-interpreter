module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transTypeIdent :: TypeIdent -> Result
transTypeIdent x = case x of
  TypeIdent string -> failure x
transValueIdent :: ValueIdent -> Result
transValueIdent x = case x of
  ValueIdent string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Program decls -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ELet decls exp -> failure x
  ECase exp caseparts -> failure x
  ELambda valueident exp -> failure x
  EIf exp1 exp2 exp3 -> failure x
  EAnd exp1 exp2 -> failure x
  EOr exp1 exp2 -> failure x
  ELT exp1 exp2 -> failure x
  ELTE exp1 exp2 -> failure x
  EGT exp1 exp2 -> failure x
  EGTE exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENEq exp1 exp2 -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  EApp exp1 exp2 -> failure x
  EInt integer -> failure x
  EVarValue valueident -> failure x
  EVarType typeident -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DValue valueident valueidents exp -> failure x
  DValueWhere valueident valueidents exp decls -> failure x
  DType valueident typeref -> failure x
  DData typedecl variants -> failure x
transCasePart :: CasePart -> Result
transCasePart x = case x of
  CaseP pattern exp -> failure x
transPattern :: Pattern -> Result
transPattern x = case x of
  PVariant typeident patterns -> failure x
  PValue valueident -> failure x
  PAny -> failure x
transTypeDecl :: TypeDecl -> Result
transTypeDecl x = case x of
  TDecl typeident valueidents -> failure x
transTypeRef :: TypeRef -> Result
transTypeRef x = case x of
  TRVariant typeident typerefs -> failure x
  TRFunc typeref1 typeref2 -> failure x
  TRValue valueident -> failure x
  TRSimpleVariant typeident -> failure x
transVariant :: Variant -> Result
transVariant x = case x of
  Var typeident typerefs -> failure x
  SimpleVar typeident -> failure x

