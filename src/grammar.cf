EApp. Exp ::= Exp Exp1;
EIf. Exp ::= "if" Exp "then" Exp "else" Exp ;
ELet. Exp ::= "let" Ident "=" Exp "in" Exp ;
EWhere. Exp ::= Exp "where" "{" [Decl] "}";
ECase. Exp ::= "case" Exp "of" "{" [CasePart] "}" ;
ELambda. Exp ::= "\\" Ident "->" Exp ;
EAdd.	Exp	::=	Exp	"+"	Exp1	;
ESub.	Exp	::=	Exp	"-"	Exp1	;
EMul.	Exp1	::=	Exp1	"*"	Exp2	;
EDiv.	Exp1	::=	Exp1	"/"	Exp2	;
EInt.	Exp2	::=	Integer	;
EVar. Exp2 ::= Ident ;
coercions	Exp	2	;

CaseP. CasePart ::= Pattern "->" Exp;
separator CasePart ";" ;

PAny. Pattern ::= "_";
PVariant. Pattern ::= Ident [Pattern] ;
_. Pattern ::= "(" Pattern ")" ;
separator Pattern " " ;


TDecl. TypeDecl ::= Ident [Ident] ;
-- e.g. `Blah a b c`

TRef. TypeRef ::= Ident [TypeRef] ;
_. TypeRef ::= "(" TypeRef ")" ;
separator TypeRef "" ;
-- e.g. `Blah (Blah a b c) [Blah] ;

Var. Variant ::= Ident [TypeRef] ;
separator TypeRef "" ;

DConst. Decl ::= Ident [Ident] "=" Exp ;
DData. Decl ::= "data" TypeDecl "=" [Variant] ;

separator Ident "" ; 
separator Decl ";" ;
separator Variant "|" ;

