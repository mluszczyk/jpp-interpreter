

module AbsGrammar where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Exp
    = EApp Exp Exp
    | EIf Exp Exp Exp
    | ELet Ident Exp Exp
    | EWhere Exp [Decl]
    | ELambda Ident Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EInt Integer
    | EVar Ident
  deriving (Eq, Ord, Show, Read)

data Decl
    = DConst Ident [Ident] Exp | DData Ident [Ident] [Variant]
  deriving (Eq, Ord, Show, Read)

data Variant = V Ident [Ident]
  deriving (Eq, Ord, Show, Read)

